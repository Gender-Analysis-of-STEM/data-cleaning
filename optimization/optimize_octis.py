# -*- coding: utf-8 -*-
"""optimize-octis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kJ5SbYOefCHo3VU_eQ-D2Y1kTB118eih

### Install Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install octis

"""### Import libraries"""

from octis.models.CTM import CTM
from octis.dataset.dataset import Dataset
from octis.optimization.optimizer import Optimizer
from skopt.space.space import Real, Categorical, Integer
from octis.evaluation_metrics.coherence_metrics import Coherence
from octis.models.LDA import LDA
from octis.evaluation_metrics.diversity_metrics import TopicDiversity
from octis.evaluation_metrics.coherence_metrics import Coherence

"""### Load Data"""

from octis.dataset.dataset import Dataset
dataset = Dataset()
dataset.load_custom_dataset_from_folder("STEM")

"""### Load Topic Model"""

model = CTM(num_topics=10,
            num_epochs=30,
            inference_type='zeroshot', 
            bert_model="distiluse-base-multilingual-cased")

"""### Define Evaluation Metrics"""

#Coherence
npmi = Coherence(texts=dataset.get_corpus())

#Diversity
topic_diversity = TopicDiversity(topk=10)

search_space = {"num_layers": Categorical({1, 2, 3}), 
                "num_neurons": Categorical({100, 200, 300}),
                "activation": Categorical({'relu', 'softplus'}), 
                "dropout": Real(0.0, 0.95)
}

optimization_runs=30
model_runs=1

optimizer=Optimizer()
optimization_result = optimizer.optimize(
    model, dataset, npmi, search_space, number_of_call=optimization_runs, 
    model_runs=model_runs, save_models=True, 
    extra_metrics=None, # to keep track of other metrics
    plot_best_seen=True, plot_model=True, plot_name="B0_plot",
    save_path='results2/test_ctm//')

"""### Save Results of Optimization"""

optimization_result.save_to_csv("results_ctm.csv")

"""### Analysis of the result"""

import json
res = json.load(open("results2/test_ctm/result.json",'r'))
res.keys()

res['x_iters']['activation']
res["f_val"]

import matplotlib.pyplot as plt

plt.plot(res["f_val"])

"""### Get hyperparameters"""

model.hyperparameters